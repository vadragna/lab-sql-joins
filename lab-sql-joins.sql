use sakila;

-- List the number of films per category.
SELECT c.name, COUNT(f.film_id)
FROM sakila.film f
JOIN sakila.film_category fc
USING (film_id)
JOIN category c
USING (category_id)
GROUP BY fc.category_id;

-- Retrieve the store ID, city, and country for each store.
SELECT s.store_id, co.country, c.city
FROM store s
JOIN address a
USING (address_id)
JOIN city c
USING (city_id)
JOIN country co
USING (country_id);

-- Calculate the total revenue generated by each store in dollars.

-- the results of the following two queries are different. Theoretically it could be that a staff member works in two different stores or a customer goes to two different stores.
SELECT store_id, SUM(p.amount)
FROM payment p
JOIN customer c
USING (customer_id)
JOIN store s
USING (store_id)
GROUP BY store_id;

SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM payment p
JOIN staff st 
USING (staff_id)
JOIN store s ON st.store_id = s.store_id
GROUP BY s.store_id;

-- Determine the average running time of films for each category.
SELECT c.name, ROUND(AVG(f.length), 2) as avg_duration
FROM film f
JOIN film_category fc
USING (film_id)
JOIN category c
USING (category_id)
GROUP BY c.name;

-- Identify the film categories with the longest average running time.
SELECT c.name, ROUND(AVG(f.length), 2) as avg_duration
FROM film f
JOIN film_category fc
USING (film_id)
JOIN category c
USING (category_id)
GROUP BY c.name
ORDER BY avg_duration DESC
LIMIT 3;

-- Display the top 10 most frequently rented movies in descending order.
SELECT f.title, count(rental_id) as n_rentals
FROM film f
JOIN inventory i
USING (film_id)
JOIN rental r
USING (inventory_id)
GROUP BY f.title
ORDER BY n_rentals DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT f.title, i.store_id
FROM inventory i
JOIN film f
USING (film_id)
WHERE f.title = "Academy Dinosaur" AND i.store_id = 1;

-- List of ALL film titles and if they are available in inventory.
SELECT 
 f.title, 
    count(i.inventory_id) ,
    CASE 
        WHEN COUNT(i.inventory_id) = 0 THEN 'Not Available'
        ELSE 'Available'
    END AS availability_status
FROM film f
LEFT JOIN inventory i 
USING (film_id)
GROUP BY f.film_id
